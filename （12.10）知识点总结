## I：nodejs异步的实现

noddJs的异步编程就体现在回调函数上，node.js的所有api都支持回调函数。
通过回调函数可以实现异步化，但不能说使用了回调后程序就异步化了

## II：非阻塞代码和阻塞代码

非阻塞代码也就是异步的操作，我先去完成其他的事情，等你IO操作好之后，我再来处理
阻塞代码 就是一直等着你IO操作 等IO好了之后，再做下面的事情

## nodejs为什么性能比较高

nodejs 是单进程单线程的应用程序，但是由于V8引擎提供的异步执行回调接口
，通过这些接口可以处理大量的并发，所以性能十分的高。
几乎每一个API都支持回调函数

## nodejs的事件处理使用什么设计模式

- nodejs所有的事件机制都是通过观察者模式来实现的
- 单线程会设计一个while(true)的事件循环，知道没有事件观察者退出
- 每一个异步事件都会生成一个事件观察则，如果有事件发生那么就是用回调函数


## nodejs事件驱动程序

nodejs使用事件驱动模型，当web server接受到请求之后，就把他关闭进行处理，然后去服务下一个web请求，
使用非阻塞式的IO或者是事件驱动IO


代码部分


```
// 非阻塞式IO
var fs=require("fs");

fs.readFile("q.jtxt",function(err,data){
    if(err) return console.error(err);
    console.log(data.toString());
});

console.log("程序执行结束");


// 事件的绑定与触发调用
var events=require("events");
var eventEmitter=new  events.EventEmitter();

var connectHadnler= function connected(){
    console.log("connect successfully");
    eventEmitter.emit("data_received");
}

eventEmitter.on("connection",connectHadnler);

eventEmitter.on("connection",function(){
    console.log("yes successfully");
})

eventEmitter.emit("connection");
console.log("all finished successfully");
